package com.example.filedemo.controller;

import com.example.filedemo.payload.UploadFileResponse;
import com.example.filedemo.service.FileStorageService;
import com.example.filedemo.property.FileStorageProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import javax.servlet.http.HttpServletRequest;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.Properties;

@RestController
public class FileController {

    private static final Logger logger = LoggerFactory.getLogger(FileController.class);

    @Autowired
    private FileStorageService fileStorageService;
    private String certsGenerateFolder;
    private String propFile;
    private String uploadDir;
    @Autowired
    public FileController(FileStorageProperties fileStorageProperties) {
        this.certsGenerateFolder = fileStorageProperties.getGenerateDir();
        this.propFile = fileStorageProperties.getPropertyFile();
        this.uploadDir = fileStorageProperties.getUploadDir();
    }
    
    @PostMapping("/{environment}/{service}/uploadFile")
    public UploadFileResponse uploadFile(@PathVariable String service,@PathVariable String environment,@RequestParam("file") MultipartFile file) {
    	logger.debug("In upload file function");
    	String fileName = fileStorageService.storeFile(file);
    	Properties prop = new Properties();
        OutputStream output;
		try {
			output = new FileOutputStream(propFile);
			prop.setProperty(environment+service, uploadDir+"/"+fileName);
	        prop.store(output, null);
	        output.close();
	        logger.info("Property file updated");
		} catch (FileNotFoundException e) {
			logger.error("Property file missing");
		} catch (IOException e) {
			logger.error("Unable to write to property file");
		}
        
        
//        ProcessBuilder builder = new ProcessBuilder(
//                "bash", "-c", "chmod 400 "+uploadDir+"/"+fileName);
//        builder.redirectErrorStream(true);
//        builder.start();
        logger.info("File permissions updated");
        String fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()
                .path("/downloadFile/")
                .path(fileName)
                .toUriString();
        logger.debug("Exiting file upload function");
        return new UploadFileResponse(fileName, fileDownloadUri,
                file.getContentType(), file.getSize());
    }

//    @PostMapping("/uploadMultipleFiles")
//    public List<UploadFileResponse> uploadMultipleFiles(@RequestParam("files") MultipartFile[] files) {
//        return Arrays.asList(files)
//                .stream()
//                .map(file -> uploadFile(file))
//                .collect(Collectors.toList());
//    }
   
    @GetMapping("/executeCommand/{environment}/{service}/{command:.+}")
    public ResponseEntity<String> executeCommand(@PathVariable String command,@PathVariable String service,@PathVariable String environment, HttpServletRequest request) {
//		System.out.println(next);
//    	String certDirName = certsGenerateFolder+"/"+environment+"/certs/";
//    	File certDir = new File(certDirName);
//    	if(certDir.exists()) {
//    		if(certDir.isDirectory()) {
//    			certDir.renameTo(new File(certDirName+"bkp"+new Date().toString()));
//    		}
//    	}	
    	logger.debug("IN GenCerts function");
    	Properties prop = new Properties();
    	InputStream input;
		try {
			input = new FileInputStream(propFile);
			prop.load(input);
		} catch (FileNotFoundException e) {
			logger.error("Property file missing");
		} catch (IOException e) {
			logger.error("Unable to write to property file");
		}
    	
    	String pem_file = prop.getProperty(environment+service);
    	logger.info("Pem file found");
//    	try {
//			command=URLDecoder.decode(command, "UTF-8");
//		} catch (UnsupportedEncodingException e1) {
//			logger.error("Unable to decode command");
//		}
    	String response = new String();
    	logger.info("Executing commnad: cd "+certsGenerateFolder+" && ./prod.sh "+pem_file+" "+ environment +" \""+ command+"\"");
    	ProcessBuilder builder = new ProcessBuilder(
                "bash", "-c", "cd "+certsGenerateFolder+"&& ./prod.sh "+pem_file+" "+ environment +" \""+ command+"\"");
        builder.redirectErrorStream(true);
        Process p = null;
        BufferedReader r = null;
		try {
			p = builder.start();
			p.waitFor();
			r = new BufferedReader(new InputStreamReader(p.getInputStream()));
		} catch (IOException e) {
			logger.error("Error in process builder");
		} catch (InterruptedException e) {
			logger.error("Error in process builder");
		}
		logger.info("command execution done");
        String line;
        try {
			while ((line = r.readLine()) != null) {
			    response += line+"\n";
			}
		} catch (IOException e) {
			logger.error("Error parsing response");
		}
        logger.debug("Exiting GenCerts function");
        return ResponseEntity.ok().body(response);

    }
    
    @GetMapping("/downloadFile/{fileName:.+}")
    public ResponseEntity<Resource> downloadFile(@PathVariable String fileName, HttpServletRequest request)  {
        // Load file as Resource
        Resource resource = fileStorageService.loadFileAsResource(fileName);
        
    	
        // Try to determine file's content type
        String contentType = null;
        try {
            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());
        } catch (IOException ex) {
            logger.info("Could not determine file type.");
        }

        // Fallback to the default content type if type could not be determined
        if(contentType == null) {
            contentType = "application/octet-stream";
        }

        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(contentType))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                .body(resource);
        
    }
}